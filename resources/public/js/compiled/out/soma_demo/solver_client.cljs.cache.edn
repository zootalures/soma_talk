;; Analyzed by ClojureScript 1.7.122
{:use-macros {go cljs.core.async.macros, alt! cljs.core.async.macros}, :excludes #{}, :name soma-demo.solver-client, :imports nil, :requires {http cljs-http.client, cljs-http.client cljs-http.client, cljs.core.async cljs.core.async}, :uses {timeout cljs.core.async, <! cljs.core.async, chan cljs.core.async, >! cljs.core.async, put! cljs.core.async}, :defs {term-as-str {:protocol-inline nil, :meta {:file "/Users/OCliffe/pws/soma-demo/src/soma_demo/solver_client.cljs", :line 7, :column 7, :end-line 7, :end-column 18, :arglists (quote ([term]))}, :name soma-demo.solver-client/term-as-str, :variadic false, :file "src/soma_demo/solver_client.cljs", :end-column 18, :method-params ([term]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 7, :end-line 7, :max-fixed-arity 1, :fn-var true, :arglists (quote ([term]))}, fetch-answerset {:protocol-inline nil, :meta {:file "/Users/OCliffe/pws/soma-demo/src/soma_demo/solver_client.cljs", :line 18, :column 7, :end-line 18, :end-column 22, :arglists (quote ([loc]))}, :name soma-demo.solver-client/fetch-answerset, :variadic false, :file "src/soma_demo/solver_client.cljs", :end-column 22, :method-params ([loc]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 18, :end-line 18, :max-fixed-arity 1, :fn-var true, :arglists (quote ([loc]))}, solve-programs {:protocol-inline nil, :meta {:file "/Users/OCliffe/pws/soma-demo/src/soma_demo/solver_client.cljs", :line 24, :column 7, :end-line 24, :end-column 21, :arglists (quote ([progs])), :doc "solves a program returns a channel which yeilds the answer sets "}, :name soma-demo.solver-client/solve-programs, :variadic false, :file "src/soma_demo/solver_client.cljs", :end-column 21, :method-params ([progs]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 24, :end-line 24, :max-fixed-arity 1, :fn-var true, :arglists (quote ([progs])), :doc "solves a program returns a channel which yeilds the answer sets "}}, :require-macros {cljs.core.async.macros cljs.core.async.macros}, :cljs.analyzer/constants {:seen #{:else :progs :recur :headers :with-credentials? :body}, :order [:else :with-credentials? :body :recur :headers :progs]}, :doc nil}