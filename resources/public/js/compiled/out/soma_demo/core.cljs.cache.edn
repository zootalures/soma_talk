;; Analyzed by ClojureScript 1.7.122
{:use-macros {go cljs.core.async.macros, alt! cljs.core.async.macros}, :excludes #{}, :name soma-demo.core, :imports nil, :requires {client soma-demo.solver-client, soma-demo.solver-client soma-demo.solver-client, cljs.core.async cljs.core.async}, :uses {timeout cljs.core.async, <! cljs.core.async, chan cljs.core.async, >! cljs.core.async, put! cljs.core.async}, :defs {explode-translation {:protocol-inline nil, :meta {:file "/Users/OCliffe/pws/soma-demo/src/soma_demo/core.cljs", :line 171, :column 7, :end-line 171, :end-column 26, :arglists (quote ([piece v])), :doc "Moves a piece  away from the origin by a given distance "}, :name soma-demo.core/explode-translation, :variadic false, :file "src/soma_demo/core.cljs", :end-column 26, :method-params ([piece v]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 171, :end-line 171, :max-fixed-arity 2, :fn-var true, :arglists (quote ([piece v])), :doc "Moves a piece  away from the origin by a given distance "}, create-cube-sln {:protocol-inline nil, :meta {:file "/Users/OCliffe/pws/soma-demo/src/soma_demo/core.cljs", :line 181, :column 7, :end-line 181, :end-column 22, :arglists (quote ([ansset])), :doc "Create a cube returns the geometry "}, :name soma-demo.core/create-cube-sln, :variadic false, :file "src/soma_demo/core.cljs", :end-column 22, :method-params ([ansset]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 181, :end-line 181, :max-fixed-arity 1, :fn-var true, :arglists (quote ([ansset])), :doc "Create a cube returns the geometry "}, start-animation {:protocol-inline nil, :meta {:file "/Users/OCliffe/pws/soma-demo/src/soma_demo/core.cljs", :line 40, :column 7, :end-line 40, :end-column 22, :arglists (quote ([update-animation renderer scene camera]))}, :name soma-demo.core/start-animation, :variadic false, :file "src/soma_demo/core.cljs", :end-column 22, :method-params ([update-animation renderer scene camera]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 40, :end-line 40, :max-fixed-arity 4, :fn-var true, :arglists (quote ([update-animation renderer scene camera]))}, place-piece {:protocol-inline nil, :meta {:file "/Users/OCliffe/pws/soma-demo/src/soma_demo/core.cljs", :line 89, :column 7, :end-line 89, :end-column 18, :arglists (quote ([rows cols size spacing x y])), :doc "convert unit coords to xy coords "}, :name soma-demo.core/place-piece, :variadic false, :file "src/soma_demo/core.cljs", :end-column 18, :method-params ([rows cols size spacing x y]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 89, :end-line 89, :max-fixed-arity 6, :fn-var true, :arglists (quote ([rows cols size spacing x y])), :doc "convert unit coords to xy coords "}, center-of-piece {:protocol-inline nil, :meta {:file "/Users/OCliffe/pws/soma-demo/src/soma_demo/core.cljs", :line 164, :column 7, :end-line 164, :end-column 22, :arglists (quote ([p])), :doc "returns a point at the center of a piece's coordinates "}, :name soma-demo.core/center-of-piece, :variadic false, :file "src/soma_demo/core.cljs", :end-column 22, :method-params ([p]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 164, :end-line 164, :max-fixed-arity 1, :fn-var true, :arglists (quote ([p])), :doc "returns a point at the center of a piece's coordinates "}, init-camera {:protocol-inline nil, :meta {:file "/Users/OCliffe/pws/soma-demo/src/soma_demo/core.cljs", :line 9, :column 7, :end-line 9, :end-column 18, :arglists (quote ([scene width height]))}, :name soma-demo.core/init-camera, :variadic false, :file "src/soma_demo/core.cljs", :end-column 18, :method-params ([scene width height]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 9, :end-line 9, :max-fixed-arity 3, :fn-var true, :arglists (quote ([scene width height]))}, display-pieces-from-url {:protocol-inline nil, :meta {:file "/Users/OCliffe/pws/soma-demo/src/soma_demo/core.cljs", :line 100, :column 7, :end-line 100, :end-column 30, :arglists (quote ([canvas-element-id url] [canvas-element-id url cols spin] [canvas-element-id url cols spin ws-scale])), :top-fn {:variadic false, :max-fixed-arity 5, :method-params ([canvas-element-id url] [canvas-element-id url cols spin] [canvas-element-id url cols spin ws-scale]), :arglists ([canvas-element-id url] [canvas-element-id url cols spin] [canvas-element-id url cols spin ws-scale]), :arglists-meta (nil nil nil)}}, :name soma-demo.core/display-pieces-from-url, :variadic false, :file "src/soma_demo/core.cljs", :end-column 30, :top-fn {:variadic false, :max-fixed-arity 5, :method-params ([canvas-element-id url] [canvas-element-id url cols spin] [canvas-element-id url cols spin ws-scale]), :arglists ([canvas-element-id url] [canvas-element-id url cols spin] [canvas-element-id url cols spin ws-scale]), :arglists-meta (nil nil nil)}, :method-params ([canvas-element-id url] [canvas-element-id url cols spin] [canvas-element-id url cols spin ws-scale]), :protocol-impl nil, :arglists-meta (nil nil nil), :column 1, :line 100, :end-line 100, :max-fixed-arity 5, :fn-var true, :arglists ([canvas-element-id url] [canvas-element-id url cols spin] [canvas-element-id url cols spin ws-scale])}, animate-explode-part {:protocol-inline nil, :meta {:file "/Users/OCliffe/pws/soma-demo/src/soma_demo/core.cljs", :line 209, :column 7, :end-line 209, :end-column 27, :arglists (quote ([geom parts v]))}, :name soma-demo.core/animate-explode-part, :variadic false, :file "src/soma_demo/core.cljs", :end-column 27, :method-params ([geom parts v]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 209, :end-line 209, :max-fixed-arity 3, :fn-var true, :arglists (quote ([geom parts v]))}, color-pallette {:protocol-inline nil, :meta {:file "/Users/OCliffe/pws/soma-demo/src/soma_demo/core.cljs", :line 61, :column 7, :end-line 61, :end-column 21, :arglists (quote ([n]))}, :name soma-demo.core/color-pallette, :variadic false, :file "src/soma_demo/core.cljs", :end-column 21, :method-params ([n]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 61, :end-line 61, :max-fixed-arity 1, :fn-var true, :arglists (quote ([n]))}, colors {:name soma-demo.core/colors, :file "src/soma_demo/core.cljs", :line 50, :column 1, :end-line 50, :end-column 12, :meta {:file "/Users/OCliffe/pws/soma-demo/src/soma_demo/core.cljs", :line 50, :column 6, :end-line 50, :end-column 12}}, animate-spin {:protocol-inline nil, :meta {:file "/Users/OCliffe/pws/soma-demo/src/soma_demo/core.cljs", :line 36, :column 7, :end-line 36, :end-column 19, :arglists (quote ([piece ts increment]))}, :name soma-demo.core/animate-spin, :variadic false, :file "src/soma_demo/core.cljs", :end-column 19, :method-params ([piece ts increment]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 36, :end-line 36, :max-fixed-arity 3, :fn-var true, :arglists (quote ([piece ts increment]))}, cubesize {:name soma-demo.core/cubesize, :file "src/soma_demo/core.cljs", :line 65, :column 1, :end-line 65, :end-column 14, :meta {:file "/Users/OCliffe/pws/soma-demo/src/soma_demo/core.cljs", :line 65, :column 6, :end-line 65, :end-column 14}}, display-sln-from-url {:protocol-inline nil, :meta {:file "/Users/OCliffe/pws/soma-demo/src/soma_demo/core.cljs", :line 216, :column 7, :end-line 216, :end-column 27, :arglists (quote ([canvas-element-id url cols ws-scale]))}, :name soma-demo.core/display-sln-from-url, :variadic false, :file "src/soma_demo/core.cljs", :end-column 27, :method-params ([canvas-element-id url cols ws-scale]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 216, :end-line 216, :max-fixed-arity 4, :fn-var true, :arglists (quote ([canvas-element-id url cols ws-scale]))}, create-piece-mesh {:protocol-inline nil, :meta {:file "/Users/OCliffe/pws/soma-demo/src/soma_demo/core.cljs", :line 68, :column 7, :end-line 68, :end-column 24, :arglists (quote ([idx parts])), :doc "Create a mesh for a single piece - takes a piece index and  list of coords "}, :name soma-demo.core/create-piece-mesh, :variadic false, :file "src/soma_demo/core.cljs", :end-column 24, :method-params ([idx parts]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 68, :end-line 68, :max-fixed-arity 2, :fn-var true, :arglists (quote ([idx parts])), :doc "Create a mesh for a single piece - takes a piece index and  list of coords "}, init-renderer {:protocol-inline nil, :meta {:file "/Users/OCliffe/pws/soma-demo/src/soma_demo/core.cljs", :line 26, :column 7, :end-line 26, :end-column 20, :arglists (quote ([canvas-element]))}, :name soma-demo.core/init-renderer, :variadic false, :file "src/soma_demo/core.cljs", :end-column 20, :method-params ([canvas-element]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 26, :end-line 26, :max-fixed-arity 1, :fn-var true, :arglists (quote ([canvas-element]))}, init-lighting {:protocol-inline nil, :meta {:file "/Users/OCliffe/pws/soma-demo/src/soma_demo/core.cljs", :line 17, :column 7, :end-line 17, :end-column 20, :arglists (quote ([scene]))}, :name soma-demo.core/init-lighting, :variadic false, :file "src/soma_demo/core.cljs", :end-column 20, :method-params ([scene]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 17, :end-line 17, :max-fixed-arity 1, :fn-var true, :arglists (quote ([scene]))}, on-js-reload {:protocol-inline nil, :meta {:file "/Users/OCliffe/pws/soma-demo/src/soma_demo/core.cljs", :line 272, :column 9, :end-line 272, :end-column 21, :arglists (quote ([]))}, :name soma-demo.core/on-js-reload, :variadic false, :file "src/soma_demo/core.cljs", :end-column 21, :method-params ([]), :protocol-impl nil, :arglists-meta (nil nil), :column 3, :line 272, :end-line 272, :max-fixed-arity 0, :fn-var true, :arglists (quote ([]))}, move-piece {:protocol-inline nil, :meta {:file "/Users/OCliffe/pws/soma-demo/src/soma_demo/core.cljs", :line 157, :column 7, :end-line 157, :end-column 17, :arglists (quote ([part [dx dy dz]]))}, :name soma-demo.core/move-piece, :variadic false, :file "src/soma_demo/core.cljs", :end-column 17, :method-params ([part p__78807]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 157, :end-line 157, :max-fixed-arity 2, :fn-var true, :arglists (quote ([part [dx dy dz]]))}}, :require-macros {cljs.core.async.macros cljs.core.async.macros}, :cljs.analyzer/constants {:seen #{:color :else :part :parts :recur :geom :pieces}, :order [:color :recur :part :else :geom :parts :pieces]}, :doc nil}