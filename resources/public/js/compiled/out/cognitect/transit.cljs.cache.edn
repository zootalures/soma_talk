;; Analyzed by ClojureScript 1.7.122
{:use-macros nil, :excludes #{uuid integer?}, :name cognitect.transit, :imports {Long goog.math.Long}, :requires {t com.cognitect.transit, com.cognitect.transit com.cognitect.transit, ty com.cognitect.transit.types, com.cognitect.transit.types com.cognitect.transit.types, eq com.cognitect.transit.eq, com.cognitect.transit.eq com.cognitect.transit.eq, Long goog.math.Long}, :uses nil, :defs {uri {:protocol-inline nil, :meta {:file "/Users/OCliffe/pws/soma-demo/resources/public/js/compiled/out/cognitect/transit.cljs", :line 309, :column 7, :end-line 309, :end-column 10, :arglists (quote ([s])), :doc "Construct a URI from a string."}, :name cognitect.transit/uri, :variadic false, :file "resources/public/js/compiled/out/cognitect/transit.cljs", :end-column 10, :method-params ([s]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 309, :end-line 309, :max-fixed-arity 1, :fn-var true, :arglists (quote ([s])), :doc "Construct a URI from a string."}, uuid {:protocol-inline nil, :meta {:file "/Users/OCliffe/pws/soma-demo/resources/public/js/compiled/out/cognitect/transit.cljs", :line 319, :column 7, :end-line 319, :end-column 11, :arglists (quote ([s])), :doc "Construct a UUID from a string."}, :name cognitect.transit/uuid, :variadic false, :file "resources/public/js/compiled/out/cognitect/transit.cljs", :end-column 11, :method-params ([s]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 319, :end-line 319, :max-fixed-arity 1, :fn-var true, :arglists (quote ([s])), :doc "Construct a UUID from a string."}, ->t_cognitect$transit24760 {:protocol-inline nil, :meta {:anonymous true, :protocols #{cognitect.transit/Object cljs.core/IMeta cljs.core/IWithMeta}, :skip-protocol-flag #{cljs.core/IMeta cljs.core/IWithMeta}, :factory :positional, :arglists (quote ([tag-fn rep-fn str-rep-fn verbose-handler-fn meta24761])), :file nil}, :protocols #{cognitect.transit/Object cljs.core/IMeta cljs.core/IWithMeta}, :name cognitect.transit/->t_cognitect$transit24760, :variadic false, :file "resources/public/js/compiled/out/cognitect/transit.cljs", :method-params ([tag-fn rep-fn str-rep-fn verbose-handler-fn meta24761]), :protocol-impl nil, :arglists-meta (nil nil), :anonymous true, :column 6, :factory :positional, :line 255, :max-fixed-arity 5, :fn-var true, :arglists (quote ([tag-fn rep-fn str-rep-fn verbose-handler-fn meta24761])), :skip-protocol-flag #{cljs.core/IMeta cljs.core/IWithMeta}}, KeywordHandler {:no-doc true, :num-fields 0, :protocols #{cognitect.transit/Object}, :name cognitect.transit/KeywordHandler, :file "resources/public/js/compiled/out/cognitect/transit.cljs", :end-column 33, :type true, :column 19, :line 118, :record false, :end-line 118, :skip-protocol-flag nil}, VectorHandler {:no-doc true, :num-fields 0, :protocols #{cognitect.transit/Object}, :name cognitect.transit/VectorHandler, :file "resources/public/js/compiled/out/cognitect/transit.cljs", :end-column 32, :type true, :column 19, :line 154, :record false, :end-line 154, :skip-protocol-flag nil}, bigint? {:protocol-inline nil, :meta {:file "/Users/OCliffe/pws/soma-demo/resources/public/js/compiled/out/cognitect/transit.cljs", :line 294, :column 7, :end-line 294, :end-column 14, :arglists (quote ([x])), :doc "Returns true if x is a transit big decimal value, false otherwise."}, :name cognitect.transit/bigint?, :variadic false, :file "resources/public/js/compiled/out/cognitect/transit.cljs", :end-column 14, :method-params ([x]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 294, :end-line 294, :max-fixed-arity 1, :fn-var true, :arglists (quote ([x])), :doc "Returns true if x is a transit big decimal value, false otherwise."}, MapBuilder {:no-doc true, :num-fields 0, :protocols #{cognitect.transit/Object}, :name cognitect.transit/MapBuilder, :file "resources/public/js/compiled/out/cognitect/transit.cljs", :end-column 29, :type true, :column 19, :line 70, :record false, :end-line 70, :skip-protocol-flag nil}, ->UUIDHandler {:no-doc true, :protocol-inline nil, :meta {:no-doc true, :protocols #{cognitect.transit/Object}, :file "/Users/OCliffe/pws/soma-demo/resources/public/js/compiled/out/cognitect/transit.cljs", :end-column 30, :column 19, :factory :positional, :line 163, :end-line 163, :arglists (quote ([])), :skip-protocol-flag nil}, :protocols #{cognitect.transit/Object}, :name cognitect.transit/->UUIDHandler, :variadic false, :file "resources/public/js/compiled/out/cognitect/transit.cljs", :end-column 30, :method-params ([]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :factory :positional, :line 163, :end-line 163, :max-fixed-arity 0, :fn-var true, :arglists (quote ([])), :skip-protocol-flag nil}, ->MapBuilder {:no-doc true, :protocol-inline nil, :meta {:no-doc true, :protocols #{cognitect.transit/Object}, :file "/Users/OCliffe/pws/soma-demo/resources/public/js/compiled/out/cognitect/transit.cljs", :end-column 29, :column 19, :factory :positional, :line 70, :end-line 70, :arglists (quote ([])), :skip-protocol-flag nil}, :protocols #{cognitect.transit/Object}, :name cognitect.transit/->MapBuilder, :variadic false, :file "resources/public/js/compiled/out/cognitect/transit.cljs", :end-column 29, :method-params ([]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :factory :positional, :line 70, :end-line 70, :max-fixed-arity 0, :fn-var true, :arglists (quote ([])), :skip-protocol-flag nil}, ->KeywordHandler {:no-doc true, :protocol-inline nil, :meta {:no-doc true, :protocols #{cognitect.transit/Object}, :file "/Users/OCliffe/pws/soma-demo/resources/public/js/compiled/out/cognitect/transit.cljs", :end-column 33, :column 19, :factory :positional, :line 118, :end-line 118, :arglists (quote ([])), :skip-protocol-flag nil}, :protocols #{cognitect.transit/Object}, :name cognitect.transit/->KeywordHandler, :variadic false, :file "resources/public/js/compiled/out/cognitect/transit.cljs", :end-column 33, :method-params ([]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :factory :positional, :line 118, :end-line 118, :max-fixed-arity 0, :fn-var true, :arglists (quote ([])), :skip-protocol-flag nil}, binary {:protocol-inline nil, :meta {:file "/Users/OCliffe/pws/soma-demo/resources/public/js/compiled/out/cognitect/transit.cljs", :line 329, :column 7, :end-line 329, :end-column 13, :arglists (quote ([s])), :doc "Construct a transit binary value. s should be base64 encoded\n   string."}, :name cognitect.transit/binary, :variadic false, :file "resources/public/js/compiled/out/cognitect/transit.cljs", :end-column 13, :method-params ([s]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 329, :end-line 329, :max-fixed-arity 1, :fn-var true, :arglists (quote ([s])), :doc "Construct a transit binary value. s should be base64 encoded\n   string."}, ->SymbolHandler {:no-doc true, :protocol-inline nil, :meta {:no-doc true, :protocols #{cognitect.transit/Object}, :file "/Users/OCliffe/pws/soma-demo/resources/public/js/compiled/out/cognitect/transit.cljs", :end-column 32, :column 19, :factory :positional, :line 124, :end-line 124, :arglists (quote ([])), :skip-protocol-flag nil}, :protocols #{cognitect.transit/Object}, :name cognitect.transit/->SymbolHandler, :variadic false, :file "resources/public/js/compiled/out/cognitect/transit.cljs", :end-column 32, :method-params ([]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :factory :positional, :line 124, :end-line 124, :max-fixed-arity 0, :fn-var true, :arglists (quote ([])), :skip-protocol-flag nil}, write-handler {:protocol-inline nil, :meta {:file "/Users/OCliffe/pws/soma-demo/resources/public/js/compiled/out/cognitect/transit.cljs", :line 246, :column 7, :end-line 246, :end-column 20, :arglists (quote ([tag-fn rep-fn] [tag-fn rep-fn str-rep-fn] [tag-fn rep-fn str-rep-fn verbose-handler-fn])), :doc "Creates a transit write handler whose tag, rep,\n   stringRep, and verboseWriteHandler methods\n   invoke the provided fns.", :top-fn {:variadic false, :max-fixed-arity 4, :method-params ([tag-fn rep-fn] [tag-fn rep-fn str-rep-fn] [tag-fn rep-fn str-rep-fn verbose-handler-fn]), :arglists ([tag-fn rep-fn] [tag-fn rep-fn str-rep-fn] [tag-fn rep-fn str-rep-fn verbose-handler-fn]), :arglists-meta (nil nil nil)}}, :name cognitect.transit/write-handler, :variadic false, :file "resources/public/js/compiled/out/cognitect/transit.cljs", :end-column 20, :top-fn {:variadic false, :max-fixed-arity 4, :method-params ([tag-fn rep-fn] [tag-fn rep-fn str-rep-fn] [tag-fn rep-fn str-rep-fn verbose-handler-fn]), :arglists ([tag-fn rep-fn] [tag-fn rep-fn str-rep-fn] [tag-fn rep-fn str-rep-fn verbose-handler-fn]), :arglists-meta (nil nil nil)}, :method-params ([tag-fn rep-fn] [tag-fn rep-fn str-rep-fn] [tag-fn rep-fn str-rep-fn verbose-handler-fn]), :protocol-impl nil, :arglists-meta (nil nil nil), :column 1, :line 246, :end-line 246, :max-fixed-arity 4, :fn-var true, :arglists ([tag-fn rep-fn] [tag-fn rep-fn str-rep-fn] [tag-fn rep-fn str-rep-fn verbose-handler-fn]), :doc "Creates a transit write handler whose tag, rep,\n   stringRep, and verboseWriteHandler methods\n   invoke the provided fns."}, VectorBuilder {:no-doc true, :num-fields 0, :protocols #{cognitect.transit/Object}, :name cognitect.transit/VectorBuilder, :file "resources/public/js/compiled/out/cognitect/transit.cljs", :end-column 32, :type true, :column 19, :line 77, :record false, :end-line 77, :skip-protocol-flag nil}, read {:protocol-inline nil, :meta {:file "/Users/OCliffe/pws/soma-demo/resources/public/js/compiled/out/cognitect/transit.cljs", :line 112, :column 7, :end-line 112, :end-column 11, :arglists (quote ([r str])), :doc "Read a transit encoded string into ClojureScript values given a \n   transit reader."}, :name cognitect.transit/read, :variadic false, :file "resources/public/js/compiled/out/cognitect/transit.cljs", :end-column 11, :method-params ([r str]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 112, :end-line 112, :max-fixed-arity 2, :fn-var true, :arglists (quote ([r str])), :doc "Read a transit encoded string into ClojureScript values given a \n   transit reader."}, uri? {:protocol-inline nil, :meta {:file "/Users/OCliffe/pws/soma-demo/resources/public/js/compiled/out/cognitect/transit.cljs", :line 314, :column 7, :end-line 314, :end-column 11, :arglists (quote ([x])), :doc "Returns true if x is a transit URI value, false otherwise."}, :name cognitect.transit/uri?, :variadic false, :file "resources/public/js/compiled/out/cognitect/transit.cljs", :end-column 11, :method-params ([x]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 314, :end-line 314, :max-fixed-arity 1, :fn-var true, :arglists (quote ([x])), :doc "Returns true if x is a transit URI value, false otherwise."}, binary? {:protocol-inline nil, :meta {:file "/Users/OCliffe/pws/soma-demo/resources/public/js/compiled/out/cognitect/transit.cljs", :line 335, :column 7, :end-line 335, :end-column 14, :arglists (quote ([x])), :doc "Returns true if x is a transit binary value, false otherwise."}, :name cognitect.transit/binary?, :variadic false, :file "resources/public/js/compiled/out/cognitect/transit.cljs", :end-column 14, :method-params ([x]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 335, :end-line 335, :max-fixed-arity 1, :fn-var true, :arglists (quote ([x])), :doc "Returns true if x is a transit binary value, false otherwise."}, ->MapHandler {:no-doc true, :protocol-inline nil, :meta {:no-doc true, :protocols #{cognitect.transit/Object}, :file "/Users/OCliffe/pws/soma-demo/resources/public/js/compiled/out/cognitect/transit.cljs", :end-column 29, :column 19, :factory :positional, :line 139, :end-line 139, :arglists (quote ([])), :skip-protocol-flag nil}, :protocols #{cognitect.transit/Object}, :name cognitect.transit/->MapHandler, :variadic false, :file "resources/public/js/compiled/out/cognitect/transit.cljs", :end-column 29, :method-params ([]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :factory :positional, :line 139, :end-line 139, :max-fixed-arity 0, :fn-var true, :arglists (quote ([])), :skip-protocol-flag nil}, MapHandler {:no-doc true, :num-fields 0, :protocols #{cognitect.transit/Object}, :name cognitect.transit/MapHandler, :file "resources/public/js/compiled/out/cognitect/transit.cljs", :end-column 29, :type true, :column 19, :line 139, :record false, :end-line 139, :skip-protocol-flag nil}, bigint {:protocol-inline nil, :meta {:file "/Users/OCliffe/pws/soma-demo/resources/public/js/compiled/out/cognitect/transit.cljs", :line 289, :column 7, :end-line 289, :end-column 13, :arglists (quote ([s])), :doc "Construct a big decimal from a string."}, :name cognitect.transit/bigint, :variadic false, :file "resources/public/js/compiled/out/cognitect/transit.cljs", :end-column 13, :method-params ([s]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 289, :end-line 289, :max-fixed-arity 1, :fn-var true, :arglists (quote ([s])), :doc "Construct a big decimal from a string."}, bigdec? {:protocol-inline nil, :meta {:file "/Users/OCliffe/pws/soma-demo/resources/public/js/compiled/out/cognitect/transit.cljs", :line 304, :column 7, :end-line 304, :end-column 14, :arglists (quote ([x])), :doc "Returns true if x is a transit big decimal value, false otherwise."}, :name cognitect.transit/bigdec?, :variadic false, :file "resources/public/js/compiled/out/cognitect/transit.cljs", :end-column 14, :method-params ([x]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 304, :end-line 304, :max-fixed-arity 1, :fn-var true, :arglists (quote ([x])), :doc "Returns true if x is a transit big decimal value, false otherwise."}, SetHandler {:no-doc true, :num-fields 0, :protocols #{cognitect.transit/Object}, :name cognitect.transit/SetHandler, :file "resources/public/js/compiled/out/cognitect/transit.cljs", :end-column 29, :type true, :column 19, :line 145, :record false, :end-line 145, :skip-protocol-flag nil}, SymbolHandler {:no-doc true, :num-fields 0, :protocols #{cognitect.transit/Object}, :name cognitect.transit/SymbolHandler, :file "resources/public/js/compiled/out/cognitect/transit.cljs", :end-column 32, :type true, :column 19, :line 124, :record false, :end-line 124, :skip-protocol-flag nil}, tagged-value {:protocol-inline nil, :meta {:file "/Users/OCliffe/pws/soma-demo/resources/public/js/compiled/out/cognitect/transit.cljs", :line 265, :column 7, :end-line 265, :end-column 19, :arglists (quote ([tag rep])), :doc "Construct a tagged value. tag must be a string and rep can\n   be any transit encodeable value."}, :name cognitect.transit/tagged-value, :variadic false, :file "resources/public/js/compiled/out/cognitect/transit.cljs", :end-column 19, :method-params ([tag rep]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 265, :end-line 265, :max-fixed-arity 2, :fn-var true, :arglists (quote ([tag rep])), :doc "Construct a tagged value. tag must be a string and rep can\n   be any transit encodeable value."}, ->ListHandler {:no-doc true, :protocol-inline nil, :meta {:no-doc true, :protocols #{cognitect.transit/Object}, :file "/Users/OCliffe/pws/soma-demo/resources/public/js/compiled/out/cognitect/transit.cljs", :end-column 30, :column 19, :factory :positional, :line 130, :end-line 130, :arglists (quote ([])), :skip-protocol-flag nil}, :protocols #{cognitect.transit/Object}, :name cognitect.transit/->ListHandler, :variadic false, :file "resources/public/js/compiled/out/cognitect/transit.cljs", :end-column 30, :method-params ([]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :factory :positional, :line 130, :end-line 130, :max-fixed-arity 0, :fn-var true, :arglists (quote ([])), :skip-protocol-flag nil}, ->VectorHandler {:no-doc true, :protocol-inline nil, :meta {:no-doc true, :protocols #{cognitect.transit/Object}, :file "/Users/OCliffe/pws/soma-demo/resources/public/js/compiled/out/cognitect/transit.cljs", :end-column 32, :column 19, :factory :positional, :line 154, :end-line 154, :arglists (quote ([])), :skip-protocol-flag nil}, :protocols #{cognitect.transit/Object}, :name cognitect.transit/->VectorHandler, :variadic false, :file "resources/public/js/compiled/out/cognitect/transit.cljs", :end-column 32, :method-params ([]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :factory :positional, :line 154, :end-line 154, :max-fixed-arity 0, :fn-var true, :arglists (quote ([])), :skip-protocol-flag nil}, ListHandler {:no-doc true, :num-fields 0, :protocols #{cognitect.transit/Object}, :name cognitect.transit/ListHandler, :file "resources/public/js/compiled/out/cognitect/transit.cljs", :end-column 30, :type true, :column 19, :line 130, :record false, :end-line 130, :skip-protocol-flag nil}, ->SetHandler {:no-doc true, :protocol-inline nil, :meta {:no-doc true, :protocols #{cognitect.transit/Object}, :file "/Users/OCliffe/pws/soma-demo/resources/public/js/compiled/out/cognitect/transit.cljs", :end-column 29, :column 19, :factory :positional, :line 145, :end-line 145, :arglists (quote ([])), :skip-protocol-flag nil}, :protocols #{cognitect.transit/Object}, :name cognitect.transit/->SetHandler, :variadic false, :file "resources/public/js/compiled/out/cognitect/transit.cljs", :end-column 29, :method-params ([]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :factory :positional, :line 145, :end-line 145, :max-fixed-arity 0, :fn-var true, :arglists (quote ([])), :skip-protocol-flag nil}, UUIDHandler {:no-doc true, :num-fields 0, :protocols #{cognitect.transit/Object}, :name cognitect.transit/UUIDHandler, :file "resources/public/js/compiled/out/cognitect/transit.cljs", :end-column 30, :type true, :column 19, :line 163, :record false, :end-line 163, :skip-protocol-flag nil}, tagged-value? {:protocol-inline nil, :meta {:file "/Users/OCliffe/pws/soma-demo/resources/public/js/compiled/out/cognitect/transit.cljs", :line 271, :column 7, :end-line 271, :end-column 20, :arglists (quote ([x])), :doc "Returns true if x is a transit tagged value, false otherwise."}, :name cognitect.transit/tagged-value?, :variadic false, :file "resources/public/js/compiled/out/cognitect/transit.cljs", :end-column 20, :method-params ([x]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 271, :end-line 271, :max-fixed-arity 1, :fn-var true, :arglists (quote ([x])), :doc "Returns true if x is a transit tagged value, false otherwise."}, read-handler {:protocol-inline nil, :meta {:file "/Users/OCliffe/pws/soma-demo/resources/public/js/compiled/out/cognitect/transit.cljs", :line 240, :column 7, :end-line 240, :end-column 19, :arglists (quote ([from-rep])), :doc "Construct a read handler. Implemented as identity, exists primarily\n   for API compatiblity with transit-clj"}, :name cognitect.transit/read-handler, :variadic false, :file "resources/public/js/compiled/out/cognitect/transit.cljs", :end-column 19, :method-params ([from-rep]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 240, :end-line 240, :max-fixed-arity 1, :fn-var true, :arglists (quote ([from-rep])), :doc "Construct a read handler. Implemented as identity, exists primarily\n   for API compatiblity with transit-clj"}, write {:protocol-inline nil, :meta {:file "/Users/OCliffe/pws/soma-demo/resources/public/js/compiled/out/cognitect/transit.cljs", :line 235, :column 7, :end-line 235, :end-column 12, :arglists (quote ([w o])), :doc "Encode an object into a transit string given a transit writer."}, :name cognitect.transit/write, :variadic false, :file "resources/public/js/compiled/out/cognitect/transit.cljs", :end-column 12, :method-params ([w o]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 235, :end-line 235, :max-fixed-arity 2, :fn-var true, :arglists (quote ([w o])), :doc "Encode an object into a transit string given a transit writer."}, integer? {:protocol-inline nil, :meta {:file "/Users/OCliffe/pws/soma-demo/resources/public/js/compiled/out/cognitect/transit.cljs", :line 283, :column 7, :end-line 283, :end-column 15, :arglists (quote ([x])), :doc "Returns true if x is an integer value between the 53bit and 64bit\n  range, false otherwise."}, :name cognitect.transit/integer?, :variadic false, :file "resources/public/js/compiled/out/cognitect/transit.cljs", :end-column 15, :method-params ([x]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 283, :end-line 283, :max-fixed-arity 1, :fn-var true, :arglists (quote ([x])), :doc "Returns true if x is an integer value between the 53bit and 64bit\n  range, false otherwise."}, link? {:protocol-inline nil, :meta {:file "/Users/OCliffe/pws/soma-demo/resources/public/js/compiled/out/cognitect/transit.cljs", :line 360, :column 7, :end-line 360, :end-column 12, :arglists (quote ([x])), :doc "Returns true if x a transit link value, false if otherwise."}, :name cognitect.transit/link?, :variadic false, :file "resources/public/js/compiled/out/cognitect/transit.cljs", :end-column 12, :method-params ([x]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 360, :end-line 360, :max-fixed-arity 1, :fn-var true, :arglists (quote ([x])), :doc "Returns true if x a transit link value, false if otherwise."}, integer {:protocol-inline nil, :meta {:file "/Users/OCliffe/pws/soma-demo/resources/public/js/compiled/out/cognitect/transit.cljs", :line 276, :column 7, :end-line 276, :end-column 14, :arglists (quote ([s])), :doc "Construct a transit integer value. Returns JavaScript number if\n  in the 53bit integer range, a goog.math.Long instance if above. s\n  may be a string or a JavaScript number."}, :name cognitect.transit/integer, :variadic false, :file "resources/public/js/compiled/out/cognitect/transit.cljs", :end-column 14, :method-params ([s]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 276, :end-line 276, :max-fixed-arity 1, :fn-var true, :arglists (quote ([s])), :doc "Construct a transit integer value. Returns JavaScript number if\n  in the 53bit integer range, a goog.math.Long instance if above. s\n  may be a string or a JavaScript number."}, uuid? {:protocol-inline nil, :meta {:file "/Users/OCliffe/pws/soma-demo/resources/public/js/compiled/out/cognitect/transit.cljs", :line 324, :column 7, :end-line 324, :end-column 12, :arglists (quote ([x])), :doc "Returns true if x is a transit UUID value, false otherwise."}, :name cognitect.transit/uuid?, :variadic false, :file "resources/public/js/compiled/out/cognitect/transit.cljs", :end-column 12, :method-params ([x]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 324, :end-line 324, :max-fixed-arity 1, :fn-var true, :arglists (quote ([x])), :doc "Returns true if x is a transit UUID value, false otherwise."}, bigdec {:protocol-inline nil, :meta {:file "/Users/OCliffe/pws/soma-demo/resources/public/js/compiled/out/cognitect/transit.cljs", :line 299, :column 7, :end-line 299, :end-column 13, :arglists (quote ([s])), :doc "Construct a big decimal from a string."}, :name cognitect.transit/bigdec, :variadic false, :file "resources/public/js/compiled/out/cognitect/transit.cljs", :end-column 13, :method-params ([s]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 299, :end-line 299, :max-fixed-arity 1, :fn-var true, :arglists (quote ([s])), :doc "Construct a big decimal from a string."}, writer {:protocol-inline nil, :meta {:file "/Users/OCliffe/pws/soma-demo/resources/public/js/compiled/out/cognitect/transit.cljs", :line 169, :column 7, :end-line 169, :end-column 13, :arglists (quote ([type] [type opts])), :doc "Return a transit writer. type maybe either :json or :json-verbose.\n   opts is a map containing a :handlers entry. :handlers is a JavaScript\n   array of interleaved type constructors and handler instances for those \n   type constructors.", :top-fn {:variadic false, :max-fixed-arity 2, :method-params ([type] [type opts]), :arglists ([type] [type opts]), :arglists-meta (nil nil)}}, :name cognitect.transit/writer, :variadic false, :file "resources/public/js/compiled/out/cognitect/transit.cljs", :end-column 13, :top-fn {:variadic false, :max-fixed-arity 2, :method-params ([type] [type opts]), :arglists ([type] [type opts]), :arglists-meta (nil nil)}, :method-params ([type] [type opts]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 169, :end-line 169, :max-fixed-arity 2, :fn-var true, :arglists ([type] [type opts]), :doc "Return a transit writer. type maybe either :json or :json-verbose.\n   opts is a map containing a :handlers entry. :handlers is a JavaScript\n   array of interleaved type constructors and handler instances for those \n   type constructors."}, link {:protocol-inline nil, :meta {:file "/Users/OCliffe/pws/soma-demo/resources/public/js/compiled/out/cognitect/transit.cljs", :line 351, :column 7, :end-line 351, :end-column 11, :arglists (quote ([x])), :doc "Construct a transit link value. x should be an IMap instance\n   containing at a minimum the following keys: :href, :rel. It\n   may optionall include :name, :render, and :prompt. :href must\n   be a transit URI, all other values are strings, and :render must\n   be either :image or :link."}, :name cognitect.transit/link, :variadic false, :file "resources/public/js/compiled/out/cognitect/transit.cljs", :end-column 11, :method-params ([x]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 351, :end-line 351, :max-fixed-arity 1, :fn-var true, :arglists (quote ([x])), :doc "Construct a transit link value. x should be an IMap instance\n   containing at a minimum the following keys: :href, :rel. It\n   may optionall include :name, :render, and :prompt. :href must\n   be a transit URI, all other values are strings, and :render must\n   be either :image or :link."}, quoted? {:protocol-inline nil, :meta {:file "/Users/OCliffe/pws/soma-demo/resources/public/js/compiled/out/cognitect/transit.cljs", :line 346, :column 7, :end-line 346, :end-column 14, :arglists (quote ([x])), :doc "Returns true if x is a transit quoted value, false otherwise."}, :name cognitect.transit/quoted?, :variadic false, :file "resources/public/js/compiled/out/cognitect/transit.cljs", :end-column 14, :method-params ([x]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 346, :end-line 346, :max-fixed-arity 1, :fn-var true, :arglists (quote ([x])), :doc "Returns true if x is a transit quoted value, false otherwise."}, ->VectorBuilder {:no-doc true, :protocol-inline nil, :meta {:no-doc true, :protocols #{cognitect.transit/Object}, :file "/Users/OCliffe/pws/soma-demo/resources/public/js/compiled/out/cognitect/transit.cljs", :end-column 32, :column 19, :factory :positional, :line 77, :end-line 77, :arglists (quote ([])), :skip-protocol-flag nil}, :protocols #{cognitect.transit/Object}, :name cognitect.transit/->VectorBuilder, :variadic false, :file "resources/public/js/compiled/out/cognitect/transit.cljs", :end-column 32, :method-params ([]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :factory :positional, :line 77, :end-line 77, :max-fixed-arity 0, :fn-var true, :arglists (quote ([])), :skip-protocol-flag nil}, reader {:protocol-inline nil, :meta {:file "/Users/OCliffe/pws/soma-demo/resources/public/js/compiled/out/cognitect/transit.cljs", :line 84, :column 7, :end-line 84, :end-column 13, :arglists (quote ([type] [type opts])), :doc "Return a transit reader. type may be either :json or :json-verbose.\n   opts may be a map optionally containing a :handlers entry. The value\n   of :handlers should be map from tag to a decoder function which returns\n   then in-memory representation of the semantic transit value.", :top-fn {:variadic false, :max-fixed-arity 2, :method-params ([type] [type opts]), :arglists ([type] [type opts]), :arglists-meta (nil nil)}}, :name cognitect.transit/reader, :variadic false, :file "resources/public/js/compiled/out/cognitect/transit.cljs", :end-column 13, :top-fn {:variadic false, :max-fixed-arity 2, :method-params ([type] [type opts]), :arglists ([type] [type opts]), :arglists-meta (nil nil)}, :method-params ([type] [type opts]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 84, :end-line 84, :max-fixed-arity 2, :fn-var true, :arglists ([type] [type opts]), :doc "Return a transit reader. type may be either :json or :json-verbose.\n   opts may be a map optionally containing a :handlers entry. The value\n   of :handlers should be map from tag to a decoder function which returns\n   then in-memory representation of the semantic transit value."}, opts-merge {:no-doc true, :protocol-inline nil, :meta {:file "/Users/OCliffe/pws/soma-demo/resources/public/js/compiled/out/cognitect/transit.cljs", :line 64, :column 16, :end-line 64, :end-column 26, :no-doc true, :arglists (quote ([a b]))}, :name cognitect.transit/opts-merge, :variadic false, :file "resources/public/js/compiled/out/cognitect/transit.cljs", :end-column 26, :method-params ([a b]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 64, :end-line 64, :max-fixed-arity 2, :fn-var true, :arglists (quote ([a b]))}, quoted {:protocol-inline nil, :meta {:file "/Users/OCliffe/pws/soma-demo/resources/public/js/compiled/out/cognitect/transit.cljs", :line 340, :column 7, :end-line 340, :end-column 13, :arglists (quote ([x])), :doc "Construct a quoted transit value. x should be a transit\n   encodeable value."}, :name cognitect.transit/quoted, :variadic false, :file "resources/public/js/compiled/out/cognitect/transit.cljs", :end-column 13, :method-params ([x]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 340, :end-line 340, :max-fixed-arity 1, :fn-var true, :arglists (quote ([x])), :doc "Construct a quoted transit value. x should be a transit\n   encodeable value."}, t_cognitect$transit24760 {:num-fields 5, :protocols #{cognitect.transit/Object cljs.core/IMeta cljs.core/IWithMeta}, :name cognitect.transit/t_cognitect$transit24760, :file "resources/public/js/compiled/out/cognitect/transit.cljs", :type true, :anonymous true, :column 6, :line 255, :record false, :skip-protocol-flag #{cljs.core/IMeta cljs.core/IWithMeta}}}, :require-macros nil, :cljs.analyzer/constants {:seen #{rep-fn :else meta24761 :handlers verbose-handler-fn str-rep-fn tag-fn}, :order [:else :handlers tag-fn rep-fn str-rep-fn verbose-handler-fn meta24761]}, :doc nil}