;; Analyzed by ClojureScript 1.7.122
{:use-macros {go cljs.core.async.macros}, :excludes #{get}, :name cljs-http.client, :imports nil, :requires {uri goog.Uri, cljs-http.core cljs-http.core, async cljs.core.async, no.en.core no.en.core, goog.Uri goog.Uri, cljs-http.util cljs-http.util, cljs.core.async cljs.core.async, util cljs-http.util, clojure.string clojure.string, cljs.reader cljs.reader, core cljs-http.core}, :uses {url-decode no.en.core, <! cljs.core.async, join clojure.string, close! cljs.core.async, chan cljs.core.async, url-encode no.en.core, read-string cljs.reader, split clojure.string, put! cljs.core.async, blank? clojure.string}, :defs {options {:protocol-inline nil, :meta {:file "/Users/OCliffe/pws/soma-demo/resources/public/js/compiled/out/cljs_http/client.cljs", :line 290, :column 7, :end-line 290, :end-column 14, :arglists (quote ([url & [req]])), :doc "Like #'request, but sets the :method and :url as appropriate.", :top-fn {:variadic true, :max-fixed-arity 1, :method-params [(url [req])], :arglists ([url & [req]]), :arglists-meta (nil)}}, :name cljs-http.client/options, :variadic true, :file "resources/public/js/compiled/out/cljs_http/client.cljs", :end-column 14, :top-fn {:variadic true, :max-fixed-arity 1, :method-params [(url [req])], :arglists ([url & [req]]), :arglists-meta (nil)}, :method-params [(url [req])], :protocol-impl nil, :arglists-meta (nil), :column 1, :line 290, :end-line 290, :max-fixed-arity 1, :fn-var true, :arglists ([url & [req]]), :doc "Like #'request, but sets the :method and :url as appropriate."}, encode-val {:protocol-inline nil, :meta {:file "/Users/OCliffe/pws/soma-demo/resources/public/js/compiled/out/cljs_http/client.cljs", :line 44, :column 8, :end-line 44, :end-column 18, :private true, :arglists (quote ([k v]))}, :private true, :name cljs-http.client/encode-val, :variadic false, :file "resources/public/js/compiled/out/cljs_http/client.cljs", :end-column 18, :method-params ([k v]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 44, :end-line 44, :max-fixed-arity 2, :fn-var true, :arglists (quote ([k v]))}, put {:protocol-inline nil, :meta {:file "/Users/OCliffe/pws/soma-demo/resources/public/js/compiled/out/cljs_http/client.cljs", :line 305, :column 7, :end-line 305, :end-column 10, :arglists (quote ([url & [req]])), :doc "Like #'request, but sets the :method and :url as appropriate.", :top-fn {:variadic true, :max-fixed-arity 1, :method-params [(url [req])], :arglists ([url & [req]]), :arglists-meta (nil)}}, :name cljs-http.client/put, :variadic true, :file "resources/public/js/compiled/out/cljs_http/client.cljs", :end-column 10, :top-fn {:variadic true, :max-fixed-arity 1, :method-params [(url [req])], :arglists ([url & [req]]), :arglists-meta (nil)}, :method-params [(url [req])], :protocol-impl nil, :arglists-meta (nil), :column 1, :line 305, :end-line 305, :max-fixed-arity 1, :fn-var true, :arglists ([url & [req]]), :doc "Like #'request, but sets the :method and :url as appropriate."}, parse-query-params {:protocol-inline nil, :meta {:file "/Users/OCliffe/pws/soma-demo/resources/public/js/compiled/out/cljs_http/client.cljs", :line 15, :column 7, :end-line 15, :end-column 25, :arglists (quote ([s])), :doc "Parse `s` as query params and return a hash map."}, :name cljs-http.client/parse-query-params, :variadic false, :file "resources/public/js/compiled/out/cljs_http/client.cljs", :end-column 25, :method-params ([s]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 15, :end-line 15, :max-fixed-arity 1, :fn-var true, :arglists (quote ([s])), :doc "Parse `s` as query params and return a hash map."}, wrap-accept {:protocol-inline nil, :meta {:file "/Users/OCliffe/pws/soma-demo/resources/public/js/compiled/out/cljs_http/client.cljs", :line 104, :column 7, :end-line 104, :end-column 18, :arglists (quote ([client & [accept]])), :top-fn {:variadic true, :max-fixed-arity 1, :method-params [(client [accept])], :arglists ([client & [accept]]), :arglists-meta (nil)}}, :name cljs-http.client/wrap-accept, :variadic true, :file "resources/public/js/compiled/out/cljs_http/client.cljs", :end-column 18, :top-fn {:variadic true, :max-fixed-arity 1, :method-params [(client [accept])], :arglists ([client & [accept]]), :arglists-meta (nil)}, :method-params [(client [accept])], :protocol-impl nil, :arglists-meta (nil), :column 1, :line 104, :end-line 104, :max-fixed-arity 1, :fn-var true, :arglists ([client & [accept]])}, wrap-content-type {:protocol-inline nil, :meta {:file "/Users/OCliffe/pws/soma-demo/resources/public/js/compiled/out/cljs_http/client.cljs", :line 111, :column 7, :end-line 111, :end-column 24, :arglists (quote ([client & [content-type]])), :top-fn {:variadic true, :max-fixed-arity 1, :method-params [(client [content-type])], :arglists ([client & [content-type]]), :arglists-meta (nil)}}, :name cljs-http.client/wrap-content-type, :variadic true, :file "resources/public/js/compiled/out/cljs_http/client.cljs", :end-column 24, :top-fn {:variadic true, :max-fixed-arity 1, :method-params [(client [content-type])], :arglists ([client & [content-type]]), :arglists-meta (nil)}, :method-params [(client [content-type])], :protocol-impl nil, :arglists-meta (nil), :column 1, :line 111, :end-line 111, :max-fixed-arity 1, :fn-var true, :arglists ([client & [content-type]])}, wrap-edn-params {:protocol-inline nil, :meta {:file "/Users/OCliffe/pws/soma-demo/resources/public/js/compiled/out/cljs_http/client.cljs", :line 85, :column 7, :end-line 85, :end-column 22, :arglists (quote ([client])), :doc "Encode :edn-params in the `request` :body and set the appropriate\n  Content Type header."}, :name cljs-http.client/wrap-edn-params, :variadic false, :file "resources/public/js/compiled/out/cljs_http/client.cljs", :end-column 22, :method-params ([client]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 85, :end-line 85, :max-fixed-arity 1, :fn-var true, :arglists (quote ([client])), :doc "Encode :edn-params in the `request` :body and set the appropriate\n  Content Type header."}, wrap-form-params {:protocol-inline nil, :meta {:file "/Users/OCliffe/pws/soma-demo/resources/public/js/compiled/out/cljs_http/client.cljs", :line 181, :column 7, :end-line 181, :end-column 23, :arglists (quote ([client]))}, :name cljs-http.client/wrap-form-params, :variadic false, :file "resources/public/js/compiled/out/cljs_http/client.cljs", :end-column 23, :method-params ([client]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 181, :end-line 181, :max-fixed-arity 1, :fn-var true, :arglists (quote ([client]))}, wrap-basic-auth {:protocol-inline nil, :meta {:file "/Users/OCliffe/pws/soma-demo/resources/public/js/compiled/out/cljs_http/client.cljs", :line 208, :column 7, :end-line 208, :end-column 22, :arglists (quote ([client & [credentials]])), :doc "Middleware converting the :basic-auth option or `credentials` into\n  an Authorization header.", :top-fn {:variadic true, :max-fixed-arity 1, :method-params [(client [credentials])], :arglists ([client & [credentials]]), :arglists-meta (nil)}}, :name cljs-http.client/wrap-basic-auth, :variadic true, :file "resources/public/js/compiled/out/cljs_http/client.cljs", :end-column 22, :top-fn {:variadic true, :max-fixed-arity 1, :method-params [(client [credentials])], :arglists ([client & [credentials]]), :arglists-meta (nil)}, :method-params [(client [credentials])], :protocol-impl nil, :arglists-meta (nil), :column 1, :line 208, :end-line 208, :max-fixed-arity 1, :fn-var true, :arglists ([client & [credentials]]), :doc "Middleware converting the :basic-auth option or `credentials` into\n  an Authorization header."}, wrap-request {:protocol-inline nil, :meta {:file "/Users/OCliffe/pws/soma-demo/resources/public/js/compiled/out/cljs_http/client.cljs", :line 238, :column 7, :end-line 238, :end-column 19, :arglists (quote ([request])), :doc "Returns a batteries-included HTTP request function coresponding to the given\n   core client. See client/client."}, :name cljs-http.client/wrap-request, :variadic false, :file "resources/public/js/compiled/out/cljs_http/client.cljs", :end-column 19, :method-params ([request]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 238, :end-line 238, :max-fixed-arity 1, :fn-var true, :arglists (quote ([request])), :doc "Returns a batteries-included HTTP request function coresponding to the given\n   core client. See client/client."}, encode-param {:protocol-inline nil, :meta {:file "/Users/OCliffe/pws/soma-demo/resources/public/js/compiled/out/cljs_http/client.cljs", :line 53, :column 8, :end-line 53, :end-column 20, :private true, :arglists (quote ([[k v]]))}, :private true, :name cljs-http.client/encode-param, :variadic false, :file "resources/public/js/compiled/out/cljs_http/client.cljs", :end-column 20, :method-params ([p__10406]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 53, :end-line 53, :max-fixed-arity 1, :fn-var true, :arglists (quote ([[k v]]))}, request {:name cljs-http.client/request, :file "resources/public/js/compiled/out/cljs_http/client.cljs", :line 259, :column 1, :end-line 268, :end-column 10, :doc "Executes the HTTP request corresponding to the given map and returns the\n   response map for corresponding to the resulting HTTP response.\n\n   In addition to the standard Ring request keys, the following keys are also\n   recognized:\n   * :url\n   * :method\n   * :query-params", :meta {:file "/Users/OCliffe/pws/soma-demo/resources/public/js/compiled/out/cljs_http/client.cljs", :line 268, :column 3, :end-line 268, :end-column 10, :doc "Executes the HTTP request corresponding to the given map and returns the\n   response map for corresponding to the resulting HTTP response.\n\n   In addition to the standard Ring request keys, the following keys are also\n   recognized:\n   * :url\n   * :method\n   * :query-params"}}, get {:protocol-inline nil, :meta {:file "/Users/OCliffe/pws/soma-demo/resources/public/js/compiled/out/cljs_http/client.cljs", :line 275, :column 7, :end-line 275, :end-column 10, :arglists (quote ([url & [req]])), :doc "Like #'request, but sets the :method and :url as appropriate.", :top-fn {:variadic true, :max-fixed-arity 1, :method-params [(url [req])], :arglists ([url & [req]]), :arglists-meta (nil)}}, :name cljs-http.client/get, :variadic true, :file "resources/public/js/compiled/out/cljs_http/client.cljs", :end-column 10, :top-fn {:variadic true, :max-fixed-arity 1, :method-params [(url [req])], :arglists ([url & [req]]), :arglists-meta (nil)}, :method-params [(url [req])], :protocol-impl nil, :arglists-meta (nil), :column 1, :line 275, :end-line 275, :max-fixed-arity 1, :fn-var true, :arglists ([url & [req]]), :doc "Like #'request, but sets the :method and :url as appropriate."}, patch {:protocol-inline nil, :meta {:file "/Users/OCliffe/pws/soma-demo/resources/public/js/compiled/out/cljs_http/client.cljs", :line 295, :column 7, :end-line 295, :end-column 12, :arglists (quote ([url & [req]])), :doc "Like #'request, but sets the :method and :url as appropriate.", :top-fn {:variadic true, :max-fixed-arity 1, :method-params [(url [req])], :arglists ([url & [req]]), :arglists-meta (nil)}}, :name cljs-http.client/patch, :variadic true, :file "resources/public/js/compiled/out/cljs_http/client.cljs", :end-column 12, :top-fn {:variadic true, :max-fixed-arity 1, :method-params [(url [req])], :arglists ([url & [req]]), :arglists-meta (nil)}, :method-params [(url [req])], :protocol-impl nil, :arglists-meta (nil), :column 1, :line 295, :end-line 295, :max-fixed-arity 1, :fn-var true, :arglists ([url & [req]]), :doc "Like #'request, but sets the :method and :url as appropriate."}, decode-body {:protocol-inline nil, :meta {:file "/Users/OCliffe/pws/soma-demo/resources/public/js/compiled/out/cljs_http/client.cljs", :line 76, :column 7, :end-line 76, :end-column 18, :arglists (quote ([response decode-fn content-type request-method])), :doc "Decocde the :body of `response` with `decode-fn` if the content type matches."}, :name cljs-http.client/decode-body, :variadic false, :file "resources/public/js/compiled/out/cljs_http/client.cljs", :end-column 18, :method-params ([response decode-fn content-type request-method]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 76, :end-line 76, :max-fixed-arity 4, :fn-var true, :arglists (quote ([response decode-fn content-type request-method])), :doc "Decocde the :body of `response` with `decode-fn` if the content type matches."}, wrap-json-response {:protocol-inline nil, :meta {:file "/Users/OCliffe/pws/soma-demo/resources/public/js/compiled/out/cljs_http/client.cljs", :line 166, :column 7, :end-line 166, :end-column 25, :arglists (quote ([client])), :doc "Decode application/json responses."}, :name cljs-http.client/wrap-json-response, :variadic false, :file "resources/public/js/compiled/out/cljs_http/client.cljs", :end-column 25, :method-params ([client]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 166, :end-line 166, :max-fixed-arity 1, :fn-var true, :arglists (quote ([client])), :doc "Decode application/json responses."}, wrap-transit-response {:protocol-inline nil, :meta {:file "/Users/OCliffe/pws/soma-demo/resources/public/js/compiled/out/cljs_http/client.cljs", :line 143, :column 7, :end-line 143, :end-column 28, :arglists (quote ([client])), :doc "Decode application/transit+json responses."}, :name cljs-http.client/wrap-transit-response, :variadic false, :file "resources/public/js/compiled/out/cljs_http/client.cljs", :end-column 28, :method-params ([client]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 143, :end-line 143, :max-fixed-arity 1, :fn-var true, :arglists (quote ([client])), :doc "Decode application/transit+json responses."}, wrap-edn-response {:protocol-inline nil, :meta {:file "/Users/OCliffe/pws/soma-demo/resources/public/js/compiled/out/cljs_http/client.cljs", :line 97, :column 7, :end-line 97, :end-column 24, :arglists (quote ([client])), :doc "Decode application/edn responses."}, :name cljs-http.client/wrap-edn-response, :variadic false, :file "resources/public/js/compiled/out/cljs_http/client.cljs", :end-column 24, :method-params ([client]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 97, :end-line 97, :max-fixed-arity 1, :fn-var true, :arglists (quote ([client])), :doc "Decode application/edn responses."}, move {:protocol-inline nil, :meta {:file "/Users/OCliffe/pws/soma-demo/resources/public/js/compiled/out/cljs_http/client.cljs", :line 285, :column 7, :end-line 285, :end-column 11, :arglists (quote ([url & [req]])), :doc "Like #'request, but sets the :method and :url as appropriate.", :top-fn {:variadic true, :max-fixed-arity 1, :method-params [(url [req])], :arglists ([url & [req]]), :arglists-meta (nil)}}, :name cljs-http.client/move, :variadic true, :file "resources/public/js/compiled/out/cljs_http/client.cljs", :end-column 11, :top-fn {:variadic true, :max-fixed-arity 1, :method-params [(url [req])], :arglists ([url & [req]]), :arglists-meta (nil)}, :method-params [(url [req])], :protocol-impl nil, :arglists-meta (nil), :column 1, :line 285, :end-line 285, :max-fixed-arity 1, :fn-var true, :arglists ([url & [req]]), :doc "Like #'request, but sets the :method and :url as appropriate."}, delete {:protocol-inline nil, :meta {:file "/Users/OCliffe/pws/soma-demo/resources/public/js/compiled/out/cljs_http/client.cljs", :line 270, :column 7, :end-line 270, :end-column 13, :arglists (quote ([url & [req]])), :doc "Like #'request, but sets the :method and :url as appropriate.", :top-fn {:variadic true, :max-fixed-arity 1, :method-params [(url [req])], :arglists ([url & [req]]), :arglists-meta (nil)}}, :name cljs-http.client/delete, :variadic true, :file "resources/public/js/compiled/out/cljs_http/client.cljs", :end-column 13, :top-fn {:variadic true, :max-fixed-arity 1, :method-params [(url [req])], :arglists ([url & [req]]), :arglists-meta (nil)}, :method-params [(url [req])], :protocol-impl nil, :arglists-meta (nil), :column 1, :line 270, :end-line 270, :max-fixed-arity 1, :fn-var true, :arglists ([url & [req]]), :doc "Like #'request, but sets the :method and :url as appropriate."}, wrap-json-params {:protocol-inline nil, :meta {:file "/Users/OCliffe/pws/soma-demo/resources/public/js/compiled/out/cljs_http/client.cljs", :line 154, :column 7, :end-line 154, :end-column 23, :arglists (quote ([client])), :doc "Encode :json-params in the `request` :body and set the appropriate\n  Content Type header."}, :name cljs-http.client/wrap-json-params, :variadic false, :file "resources/public/js/compiled/out/cljs_http/client.cljs", :end-column 23, :method-params ([client]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 154, :end-line 154, :max-fixed-arity 1, :fn-var true, :arglists (quote ([client])), :doc "Encode :json-params in the `request` :body and set the appropriate\n  Content Type header."}, wrap-channel-from-request-map {:protocol-inline nil, :meta {:file "/Users/OCliffe/pws/soma-demo/resources/public/js/compiled/out/cljs_http/client.cljs", :line 229, :column 7, :end-line 229, :end-column 36, :arglists (quote ([client])), :doc "Pipe the response-channel into the request-map's\n   custom channel (e.g. to enable transducers)"}, :name cljs-http.client/wrap-channel-from-request-map, :variadic false, :file "resources/public/js/compiled/out/cljs_http/client.cljs", :end-column 36, :method-params ([client]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 229, :end-line 229, :max-fixed-arity 1, :fn-var true, :arglists (quote ([client])), :doc "Pipe the response-channel into the request-map's\n   custom channel (e.g. to enable transducers)"}, parse-url {:protocol-inline nil, :meta {:file "/Users/OCliffe/pws/soma-demo/resources/public/js/compiled/out/cljs_http/client.cljs", :line 26, :column 7, :end-line 26, :end-column 16, :arglists (quote ([url])), :doc "Parse `url` into a hash map."}, :name cljs-http.client/parse-url, :variadic false, :file "resources/public/js/compiled/out/cljs_http/client.cljs", :end-column 16, :method-params ([url]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 26, :end-line 26, :max-fixed-arity 1, :fn-var true, :arglists (quote ([url])), :doc "Parse `url` into a hash map."}, wrap-url {:protocol-inline nil, :meta {:file "/Users/OCliffe/pws/soma-demo/resources/public/js/compiled/out/cljs_http/client.cljs", :line 200, :column 7, :end-line 200, :end-column 15, :arglists (quote ([client]))}, :name cljs-http.client/wrap-url, :variadic false, :file "resources/public/js/compiled/out/cljs_http/client.cljs", :end-column 15, :method-params ([client]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 200, :end-line 200, :max-fixed-arity 1, :fn-var true, :arglists (quote ([client]))}, if-pos {:protocol-inline nil, :meta {:file "/Users/OCliffe/pws/soma-demo/resources/public/js/compiled/out/cljs_http/client.cljs", :line 12, :column 7, :end-line 12, :end-column 13, :arglists (quote ([v]))}, :name cljs-http.client/if-pos, :variadic false, :file "resources/public/js/compiled/out/cljs_http/client.cljs", :end-column 13, :method-params ([v]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 12, :end-line 12, :max-fixed-arity 1, :fn-var true, :arglists (quote ([v]))}, default-transit-opts {:name cljs-http.client/default-transit-opts, :file "resources/public/js/compiled/out/cljs_http/client.cljs", :line 118, :column 1, :end-line 118, :end-column 43, :private true, :meta {:file "/Users/OCliffe/pws/soma-demo/resources/public/js/compiled/out/cljs_http/client.cljs", :line 118, :column 23, :end-line 118, :end-column 43, :private true}}, head {:protocol-inline nil, :meta {:file "/Users/OCliffe/pws/soma-demo/resources/public/js/compiled/out/cljs_http/client.cljs", :line 280, :column 7, :end-line 280, :end-column 11, :arglists (quote ([url & [req]])), :doc "Like #'request, but sets the :method and :url as appropriate.", :top-fn {:variadic true, :max-fixed-arity 1, :method-params [(url [req])], :arglists ([url & [req]]), :arglists-meta (nil)}}, :name cljs-http.client/head, :variadic true, :file "resources/public/js/compiled/out/cljs_http/client.cljs", :end-column 11, :top-fn {:variadic true, :max-fixed-arity 1, :method-params [(url [req])], :arglists ([url & [req]]), :arglists-meta (nil)}, :method-params [(url [req])], :protocol-impl nil, :arglists-meta (nil), :column 1, :line 280, :end-line 280, :max-fixed-arity 1, :fn-var true, :arglists ([url & [req]]), :doc "Like #'request, but sets the :method and :url as appropriate."}, regex-char-esc-smap {:name cljs-http.client/regex-char-esc-smap, :file "resources/public/js/compiled/out/cljs_http/client.cljs", :line 64, :column 1, :end-line 64, :end-column 25, :meta {:file "/Users/OCliffe/pws/soma-demo/resources/public/js/compiled/out/cljs_http/client.cljs", :line 64, :column 6, :end-line 64, :end-column 25}}, wrap-server-name {:protocol-inline nil, :meta {:file "/Users/OCliffe/pws/soma-demo/resources/public/js/compiled/out/cljs_http/client.cljs", :line 197, :column 7, :end-line 197, :end-column 23, :arglists (quote ([client server-name]))}, :name cljs-http.client/wrap-server-name, :variadic false, :file "resources/public/js/compiled/out/cljs_http/client.cljs", :end-column 23, :method-params ([client server-name]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 197, :end-line 197, :max-fixed-arity 2, :fn-var true, :arglists (quote ([client server-name]))}, wrap-method {:protocol-inline nil, :meta {:file "/Users/OCliffe/pws/soma-demo/resources/public/js/compiled/out/cljs_http/client.cljs", :line 190, :column 7, :end-line 190, :end-column 18, :arglists (quote ([client]))}, :name cljs-http.client/wrap-method, :variadic false, :file "resources/public/js/compiled/out/cljs_http/client.cljs", :end-column 18, :method-params ([client]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 190, :end-line 190, :max-fixed-arity 1, :fn-var true, :arglists (quote ([client]))}, escape-special {:protocol-inline nil, :meta {:file "/Users/OCliffe/pws/soma-demo/resources/public/js/compiled/out/cljs_http/client.cljs", :line 69, :column 7, :end-line 69, :end-column 21, :arglists (quote ([string])), :doc "Escape special characters -- for content-type."}, :name cljs-http.client/escape-special, :variadic false, :file "resources/public/js/compiled/out/cljs_http/client.cljs", :end-column 21, :method-params ([string]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 69, :end-line 69, :max-fixed-arity 1, :fn-var true, :arglists (quote ([string])), :doc "Escape special characters -- for content-type."}, generate-query-string {:protocol-inline nil, :meta {:file "/Users/OCliffe/pws/soma-demo/resources/public/js/compiled/out/cljs_http/client.cljs", :line 58, :column 7, :end-line 58, :end-column 28, :arglists (quote ([params]))}, :name cljs-http.client/generate-query-string, :variadic false, :file "resources/public/js/compiled/out/cljs_http/client.cljs", :end-column 28, :method-params ([params]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 58, :end-line 58, :max-fixed-arity 1, :fn-var true, :arglists (quote ([params]))}, encode-vals {:protocol-inline nil, :meta {:file "/Users/OCliffe/pws/soma-demo/resources/public/js/compiled/out/cljs_http/client.cljs", :line 47, :column 8, :end-line 47, :end-column 19, :private true, :arglists (quote ([k vs]))}, :private true, :name cljs-http.client/encode-vals, :variadic false, :file "resources/public/js/compiled/out/cljs_http/client.cljs", :end-column 19, :method-params ([k vs]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 47, :end-line 47, :max-fixed-arity 2, :fn-var true, :arglists (quote ([k vs]))}, post {:protocol-inline nil, :meta {:file "/Users/OCliffe/pws/soma-demo/resources/public/js/compiled/out/cljs_http/client.cljs", :line 300, :column 7, :end-line 300, :end-column 11, :arglists (quote ([url & [req]])), :doc "Like #'request, but sets the :method and :url as appropriate.", :top-fn {:variadic true, :max-fixed-arity 1, :method-params [(url [req])], :arglists ([url & [req]]), :arglists-meta (nil)}}, :name cljs-http.client/post, :variadic true, :file "resources/public/js/compiled/out/cljs_http/client.cljs", :end-column 11, :top-fn {:variadic true, :max-fixed-arity 1, :method-params [(url [req])], :arglists ([url & [req]]), :arglists-meta (nil)}, :method-params [(url [req])], :protocol-impl nil, :arglists-meta (nil), :column 1, :line 300, :end-line 300, :max-fixed-arity 1, :fn-var true, :arglists ([url & [req]]), :doc "Like #'request, but sets the :method and :url as appropriate."}, wrap-transit-params {:protocol-inline nil, :meta {:file "/Users/OCliffe/pws/soma-demo/resources/public/js/compiled/out/cljs_http/client.cljs", :line 122, :column 7, :end-line 122, :end-column 26, :arglists (quote ([client])), :doc "Encode :transit-params in the `request` :body and set the appropriate\n  Content Type header.\n\n  A :transit-opts map can be optionally provided with the following keys:\n\n  :encoding                #{:json, :json-verbose}\n  :decoding                #{:json, :json-verbose}\n  :encoding/decoding-opts  appropriate map of options to be passed to\n                           transit writer/reader, respectively."}, :name cljs-http.client/wrap-transit-params, :variadic false, :file "resources/public/js/compiled/out/cljs_http/client.cljs", :end-column 26, :method-params ([client]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 122, :end-line 122, :max-fixed-arity 1, :fn-var true, :arglists (quote ([client])), :doc "Encode :transit-params in the `request` :body and set the appropriate\n  Content Type header.\n\n  A :transit-opts map can be optionally provided with the following keys:\n\n  :encoding                #{:json, :json-verbose}\n  :decoding                #{:json, :json-verbose}\n  :encoding/decoding-opts  appropriate map of options to be passed to\n                           transit writer/reader, respectively."}, unexceptional-status? {:name cljs-http.client/unexceptional-status?, :file "resources/public/js/compiled/out/cljs_http/client.cljs", :line 41, :column 1, :end-line 41, :end-column 27, :meta {:file "/Users/OCliffe/pws/soma-demo/resources/public/js/compiled/out/cljs_http/client.cljs", :line 41, :column 6, :end-line 41, :end-column 27}}, wrap-oauth {:protocol-inline nil, :meta {:file "/Users/OCliffe/pws/soma-demo/resources/public/js/compiled/out/cljs_http/client.cljs", :line 219, :column 7, :end-line 219, :end-column 17, :arglists (quote ([client])), :doc "Middleware converting the :oauth-token option into an Authorization header."}, :name cljs-http.client/wrap-oauth, :variadic false, :file "resources/public/js/compiled/out/cljs_http/client.cljs", :end-column 17, :method-params ([client]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 219, :end-line 219, :max-fixed-arity 1, :fn-var true, :arglists (quote ([client])), :doc "Middleware converting the :oauth-token option into an Authorization header."}, wrap-query-params {:protocol-inline nil, :meta {:file "/Users/OCliffe/pws/soma-demo/resources/public/js/compiled/out/cljs_http/client.cljs", :line 173, :column 7, :end-line 173, :end-column 24, :arglists (quote ([client]))}, :name cljs-http.client/wrap-query-params, :variadic false, :file "resources/public/js/compiled/out/cljs_http/client.cljs", :end-column 24, :method-params ([client]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 173, :end-line 173, :max-fixed-arity 1, :fn-var true, :arglists (quote ([client]))}}, :require-macros {cljs.core.async.macros cljs.core.async.macros}, :cljs.analyzer/constants {:seen #{:encoding :get :json-params :patch :transit-params :method :encoding-opts :move :channel :delete :headers :server-port :head :form-params :decoding-opts :url :query-params :content-type :oauth-token :post :options :uri :decoding :server-name :put :json :transit-opts :query-string :body :edn-params :basic-auth :scheme :request-method :accept}, :order [:scheme :server-name :server-port :uri :query-string :query-params :head :headers :body :edn-params :request-method :accept :content-type :encoding :encoding-opts :decoding :decoding-opts :json :transit-params :transit-opts :json-params :form-params :patch :delete :post :put :method :url :basic-auth :oauth-token :channel :get :move :options]}, :doc nil}